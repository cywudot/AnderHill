import express from 'express';
import User from '../models/User.js';
import asyncHandler from 'express-async-handler';
import jwt from 'jsonwebtoken';

const userRoutes = express.Router();

// generates a JWT (JSON Web Token) by signing the user ID with a secret key stored in the TOKEN_SECRET environment variable.
const genToken = (id) => {
  //CHANGE TO 24HR FOR PRODUCTION
  return jwt.sign({ id }, process.env.TOKEN_SECRET, { expiresIn: '60d' });
};

//handles the login process for users. It extracts the email and password from the request body, finds a user with the specified email using the User.findOne method, and verifies the password by calling the matchPassword method on the user object.
const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });

  //If the user exists and the password matches, it returns a JSON response that contains the user's ID, name, email, isAdmin status, and a JWT token generated by calling the genToken function with the user's ID.
  if (user && (await user.matchPasswords(password))) {
    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      isAdmin: user.isAdmin,
      token: genToken(user._id),
    });

    //If the user does not exist or the password does not match, it sets the HTTP status code to 401 (Unauthorized) and throws an error with the message 'Invalid email or password'.
  } else {
    res.status(401).send('Invalid Email or Password');
    throw new Error('User not found.');
  }
});

const registerUser = asyncHandler(async (req, res) => {
  const { name, email, password } = req.body;

  const userExists = await User.findOne({ email });
  if (userExists) {
    res.status(400).send('We already have an account with that email address.');
  }

  const user = await User.create({
    name,
    email,
    password,
  });
  if (user) {
    res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      isAdmin: user.isAdmin,
      token: genToken(user._id),
    });
  } else {
    res.status(400).send('We could not register you.');
    throw new Error('Something went wrong. Please check your data and try again.');
  }
});

userRoutes.route('/login').post(loginUser);
userRoutes.route('/register').post(registerUser);

export default userRoutes;
